"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var mysql = require("mysql");

var MySQLWrapper = function () {
    function MySQLWrapper(config) {
        _classCallCheck(this, MySQLWrapper);

        this.config = config || {};
        this._transactionConnection = null;
        this._pool = null;
    }

    _createClass(MySQLWrapper, [{
        key: "getConnection",
        value: function getConnection(callback) {

            if (this._transactionConnection) {
                return callback(null, this._transactionConnection);
            }

            var options = this.config.connection;
            if (this.config.pooling) {
                if (this._pool == null) {
                    this._pool = mysql.createPool(options);
                }
                this._pool.getConnection(callback);
            } else {
                (function () {
                    var connection = mysql.createConnection(options);
                    connection.connect(function (error) {
                        callback(error, connection);
                    });
                })();
            }
        }
    }, {
        key: "endConnection",
        value: function endConnection(connection) {
            if (this.config.pooling) {
                if (this._pool && connection) {
                    connection.release();
                    this._transactionConnection = null;
                }
            } else {
                if (connection) {
                    this._transactionConnection = null;
                    connection.end(function (error) {});
                }
            }
        }
    }, {
        key: "close",
        value: function close(callback) {
            if (this._pool != null) {
                this._pool.end(callback);
            } else {
                if (typeof callback === "function") {
                    callback();
                }
            }
        }
    }, {
        key: "query",
        value: function query(sql, values) {
            var _this = this;

            return new Promise(function (resolve, reject) {
                _this.getConnection(function (error, connection) {
                    if (error) {
                        return reject(error);
                    }
                    connection.query(sql, values, function (error, result) {
                        if (!_this._transactionConnection) {
                            _this.endConnection(connection);
                        }
                        if (error) {
                            if (_this._transactionConnection) {
                                return _this._transactionConnection.rollback(function () {
                                    _this.endConnection(_this._transactionConnection);
                                    reject(error);
                                });
                            } else {
                                return reject(error);
                            }
                        }
                        resolve(result);
                    });
                });
            });
        }
    }, {
        key: "beginTransaction",
        value: function beginTransaction() {
            var _this2 = this;

            return new Promise(function (resolve, reject) {
                _this2.getConnection(function (error, connection) {
                    _this2._transactionConnection = connection;
                    if (error) {
                        reject(error);
                    } else {
                        _this2._transactionConnection.beginTransaction(function (error) {
                            if (error) {
                                reject(error);
                            } else {
                                resolve();
                            }
                        });
                    }
                });
            });
        }
    }, {
        key: "endTransaction",
        value: function endTransaction() {
            var _this3 = this;

            return new Promise(function (resolve, reject) {
                if (_this3._transactionConnection) {
                    _this3._transactionConnection.commit(function (error) {
                        if (error) {
                            return _this3.rollback(error);
                        } else {
                            _this3.endConnection(_this3._transactionConnection);
                            resolve();
                        }
                    });
                } else {
                    resolve();
                }
            });
        }
    }, {
        key: "rollback",
        value: function rollback(error) {
            var _this4 = this;

            return new Promise(function (resolve, reject) {
                if (_this4._transactionConnection) {
                    _this4._transactionConnection.rollback(function () {
                        _this4.endConnection(_this4._transactionConnection);
                        if (error) {
                            reject(error);
                        } else {
                            reject();
                        }
                    });
                } else {
                    resolve();
                }
            });
        }
    }]);

    return MySQLWrapper;
}();

module.exports = MySQLWrapper;